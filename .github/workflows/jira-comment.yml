name: Comment Jira Link on PR

on:
  pull_request:
    types: [opened, reopened]

permissions:
  issues: write
  pull-requests: write

jobs:
  comment-jira-link:
    runs-on: ubuntu-latest
    steps:
      - name: Comment Jira ticket link
        uses: actions/github-script@v7
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          script: |
            const jiraPrefix = 'BTS-';
            const jiraDomain = 'dydals3440-1749465647911.atlassian.net';
            const jiraBaseUrl = 'https://dydals3440-1749465647911.atlassian.net/jira/software/projects/BTS/boards/1/backlog?selectedIssue=';
            const pr = context.payload.pull_request;
            const title = pr.title;


            const match = title.match(/BTS-\d+/);
            if (!match) {
              console.log("PR 제목에서 Jira 티켓 넘버를 찾을 수 없습니다!👀");
              return;
            }

            const ticket = match[0];
            const jiraUrl = `${jiraBaseUrl}${ticket}`;

             // JIRA에서 ticket 기반 이슈 내용 가져오기 
            const res = await fetch(`https://${jiraDomain}/rest/api/3/issue/${ticket}`, {
              method: 'GET',
              headers: {
                'Authorization': `Basic ${Buffer.from(process.env.JIRA_EMAIL + ':' + process.env.JIRA_TOKEN).toString('base64')}`,
                'Accept': 'application/json'
              }
            });

            if (!res.ok) {
              console.log(`Jira API 요청 실패: ${res.status}`);
              return;
            }

            const data = await res.json();
            const summary = data.fields.summary;
            const status = data.fields.status.name;
            const assignee = data.fields.assignee?.displayName ?? '미지정👻';

            // PR에 적힌 commment list 가져오기
            const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            });

            const existing = comments.data.find(comment =>
              comment.body.includes('<!-- jira-comment -->')
            );

            const commentBody = `<!-- jira-comment -->
            🎫 관련 Jira 티켓 🔗: [${ticket}](${jiraUrl})

            📝 Jira 티켓 정보:
            - **제목**: ${summary}
            - **상태**: ${status}
            - **담당자**: ${assignee}
            `;

            if (existing) {
              await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing.id,
              body: commentBody
              });
            } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: commentBody
              })
            }
